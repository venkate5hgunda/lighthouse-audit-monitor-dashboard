using System;
using System.Collections.Generic;
using System.Globalization;
using LighthouseAuditAggregator.InputReaderModel;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Environment = LighthouseAuditAggregator.InputReaderModel.Environment;

// <auto-generated />
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//    using LighthouseAuditAggregator;
//    var welcome = Welcome.FromJson(jsonString);
namespace LighthouseAuditAggregator.OutputLoggerModel
{
    public class OutputModelRoot
    {
        [JsonProperty("fetchTime")]
        public DateTimeOffset FetchTime { get; set; }

        [JsonProperty("requestedUrl")]
        public Uri RequestedUrl { get; set; }

        [JsonProperty("auditTitle")]
        public string AuditTitle { get; set; }

        [JsonProperty("audit")]
        public Audit Audit { get; set; }

        [JsonProperty("environment")]
        public Environment Environment { get; set; }

        [JsonProperty("finalUrl")]
        public Uri FinalUrl { get; set; }

        [JsonProperty("lighthouseVersion")]
        public string LighthouseVersion { get; set; }

        [JsonProperty("userAgent")]
        public string UserAgent { get; set; }
    }

    //public class Audit
    //{
    //    [JsonProperty("description")]
    //    public string Description { get; set; }

    //    [JsonProperty("details", NullValueHandling = NullValueHandling.Ignore)]
    //    public Details Details { get; set; }

    //    [JsonProperty("displayValue", NullValueHandling = NullValueHandling.Ignore)]
    //    public string DisplayValue { get; set; }

    //    [JsonProperty("explanation", NullValueHandling = NullValueHandling.Ignore)]
    //    public string Explanation { get; set; }

    //    [JsonProperty("id")]
    //    public string Id { get; set; }

    //    [JsonProperty("numericValue", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? NumericValue { get; set; }

    //    [JsonProperty("score")]
    //    public double? Score { get; set; }

    //    [JsonProperty("scoreDisplayMode")]
    //    public ScoreDisplayMode ScoreDisplayMode { get; set; }

    //    [JsonProperty("title")]
    //    public string Title { get; set; }

    //    [JsonProperty("warnings", NullValueHandling = NullValueHandling.Ignore)]
    //    public List<string> Warnings { get; set; }
    //}

    //public class Details
    //{
    //    [JsonProperty("chains", NullValueHandling = NullValueHandling.Ignore)]
    //    public Chains Chains { get; set; }

    //    [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
    //    public string Data { get; set; }

    //    [JsonProperty("debugData", NullValueHandling = NullValueHandling.Ignore)]
    //    public DetailsDebugData DebugData { get; set; }

    //    [JsonProperty("headings", NullValueHandling = NullValueHandling.Ignore)]
    //    public List<Heading> Headings { get; set; }

    //    [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
    //    public List<Item> Items { get; set; }

    //    [JsonProperty("longestChain", NullValueHandling = NullValueHandling.Ignore)]
    //    public LongestChain LongestChain { get; set; }

    //    [JsonProperty("overallSavingsBytes", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? OverallSavingsBytes { get; set; }

    //    [JsonProperty("overallSavingsMs", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? OverallSavingsMs { get; set; }

    //    [JsonProperty("scale", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? Scale { get; set; }

    //    [JsonProperty("summary", NullValueHandling = NullValueHandling.Ignore)]
    //    public Summary Summary { get; set; }

    //    [JsonProperty("timestamp", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? Timestamp { get; set; }

    //    [JsonProperty("timing", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? Timing { get; set; }

    //    [JsonProperty("type")]
    //    public DebugDataType Type { get; set; }
    //}

    //public class Chains
    //{
    //    [JsonProperty("91A70AD299CACBDAFFBAED8F7698F985")]
    //    public The91A70Ad299Cacbdaffbaed8F7698F985 The91A70Ad299Cacbdaffbaed8F7698F985 { get; set; }
    //}

    //public class The91A70Ad299Cacbdaffbaed8F7698F985
    //{
    //    [JsonProperty("children")]
    //    public Dictionary<string, Child> Children { get; set; }

    //    [JsonProperty("request")]
    //    public Request Request { get; set; }
    //}

    //public class Child
    //{
    //    [JsonProperty("request")]
    //    public Request Request { get; set; }
    //}

    //public class Request
    //{
    //    [JsonProperty("endTime")]
    //    public double EndTime { get; set; }

    //    [JsonProperty("responseReceivedTime")]
    //    public double ResponseReceivedTime { get; set; }

    //    [JsonProperty("startTime")]
    //    public double StartTime { get; set; }

    //    [JsonProperty("transferSize")]
    //    public long TransferSize { get; set; }

    //    [JsonProperty("url")]
    //    public Uri Url { get; set; }
    //}

    //public class DetailsDebugData
    //{
    //    [JsonProperty("impact")]
    //    public string Impact { get; set; }

    //    [JsonProperty("tags")]
    //    public List<string> Tags { get; set; }

    //    [JsonProperty("type")]
    //    public DebugDataType Type { get; set; }
    //}

    //public class Heading
    //{
    //    [JsonProperty("displayUnit", NullValueHandling = NullValueHandling.Ignore)]
    //    public string DisplayUnit { get; set; }

    //    [JsonProperty("granularity", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? Granularity { get; set; }

    //    [JsonProperty("itemType", NullValueHandling = NullValueHandling.Ignore)]
    //    public ItemTypeEnum? ItemType { get; set; }

    //    [JsonProperty("key")]
    //    public string Key { get; set; }

    //    [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
    //    public Label? Label { get; set; }

    //    [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
    //    public string Text { get; set; }

    //    [JsonProperty("valueType", NullValueHandling = NullValueHandling.Ignore)]
    //    public ValueType? ValueType { get; set; }
    //}

    //public class Item
    //{
    //    [JsonProperty("cacheHitProbability", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? CacheHitProbability { get; set; }

    //    [JsonProperty("cacheLifetimeMs", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? CacheLifetimeMs { get; set; }

    //    [JsonProperty("coverage", NullValueHandling = NullValueHandling.Ignore)]
    //    public string Coverage { get; set; }

    //    [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
    //    public string Data { get; set; }

    //    [JsonProperty("debugData", NullValueHandling = NullValueHandling.Ignore)]
    //    public ItemDebugData DebugData { get; set; }

    //    [JsonProperty("detectedLib", NullValueHandling = NullValueHandling.Ignore)]
    //    public DetectedLib DetectedLib { get; set; }

    //    [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? Duration { get; set; }

    //    [JsonProperty("element", NullValueHandling = NullValueHandling.Ignore)]
    //    public ElementUnion? Element { get; set; }

    //    [JsonProperty("endTime", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? EndTime { get; set; }

    //    [JsonProperty("entity", NullValueHandling = NullValueHandling.Ignore)]
    //    public DetectedLib Entity { get; set; }

    //    [JsonProperty("estimatedInputLatency", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? EstimatedInputLatency { get; set; }

    //    [JsonProperty("failures", NullValueHandling = NullValueHandling.Ignore)]
    //    public List<string> Failures { get; set; }

    //    [JsonProperty("firstContentfulPaint", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? FirstContentfulPaint { get; set; }

    //    [JsonProperty("firstCPUIdle", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? FirstCpuIdle { get; set; }

    //    [JsonProperty("firstMeaningfulPaint", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? FirstMeaningfulPaint { get; set; }

    //    [JsonProperty("fontSize", NullValueHandling = NullValueHandling.Ignore)]
    //    public string FontSize { get; set; }

    //    [JsonProperty("group", NullValueHandling = NullValueHandling.Ignore)]
    //    public string Group { get; set; }

    //    [JsonProperty("groupLabel", NullValueHandling = NullValueHandling.Ignore)]
    //    public string GroupLabel { get; set; }

    //    [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? Height { get; set; }

    //    [JsonProperty("highestSeverity", NullValueHandling = NullValueHandling.Ignore)]
    //    public string HighestSeverity { get; set; }

    //    [JsonProperty("href", NullValueHandling = NullValueHandling.Ignore)]
    //    public Uri Href { get; set; }

    //    [JsonProperty("interactive", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? Interactive { get; set; }

    //    [JsonProperty("isParseFailure", NullValueHandling = NullValueHandling.Ignore)]
    //    public bool? IsParseFailure { get; set; }

    //    [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
    //    public string Label { get; set; }

    //    [JsonProperty("lineNumber", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? LineNumber { get; set; }

    //    [JsonProperty("mainDocumentTransferSize", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? MainDocumentTransferSize { get; set; }

    //    [JsonProperty("mainThreadTime", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? MainThreadTime { get; set; }

    //    [JsonProperty("maxRtt", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? MaxRtt { get; set; }

    //    [JsonProperty("maxServerLatency", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? MaxServerLatency { get; set; }

    //    [JsonProperty("mimeType", NullValueHandling = NullValueHandling.Ignore)]
    //    public string MimeType { get; set; }

    //    [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
    //    public string Name { get; set; }

    //    [JsonProperty("node", NullValueHandling = NullValueHandling.Ignore)]
    //    public Node Node { get; set; }

    //    [JsonProperty("npm", NullValueHandling = NullValueHandling.Ignore)]
    //    public string Npm { get; set; }

    //    [JsonProperty("numFonts", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? NumFonts { get; set; }

    //    [JsonProperty("numRequests", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? NumRequests { get; set; }

    //    [JsonProperty("numScripts", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? NumScripts { get; set; }

    //    [JsonProperty("numStylesheets", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? NumStylesheets { get; set; }

    //    [JsonProperty("numTasks", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? NumTasks { get; set; }

    //    [JsonProperty("numTasksOver100ms", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? NumTasksOver100Ms { get; set; }

    //    [JsonProperty("numTasksOver10ms", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? NumTasksOver10Ms { get; set; }

    //    [JsonProperty("numTasksOver25ms", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? NumTasksOver25Ms { get; set; }

    //    [JsonProperty("numTasksOver500ms", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? NumTasksOver500Ms { get; set; }

    //    [JsonProperty("numTasksOver50ms", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? NumTasksOver50Ms { get; set; }

    //    [JsonProperty("observedDomContentLoaded", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? ObservedDomContentLoaded { get; set; }

    //    [JsonProperty("observedDomContentLoadedTs", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? ObservedDomContentLoadedTs { get; set; }

    //    [JsonProperty("observedFirstContentfulPaint", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? ObservedFirstContentfulPaint { get; set; }

    //    [JsonProperty("observedFirstContentfulPaintTs", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? ObservedFirstContentfulPaintTs { get; set; }

    //    [JsonProperty("observedFirstMeaningfulPaint", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? ObservedFirstMeaningfulPaint { get; set; }

    //    [JsonProperty("observedFirstMeaningfulPaintTs", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? ObservedFirstMeaningfulPaintTs { get; set; }

    //    [JsonProperty("observedFirstPaint", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? ObservedFirstPaint { get; set; }

    //    [JsonProperty("observedFirstPaintTs", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? ObservedFirstPaintTs { get; set; }

    //    [JsonProperty("observedFirstVisualChange", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? ObservedFirstVisualChange { get; set; }

    //    [JsonProperty("observedFirstVisualChangeTs", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? ObservedFirstVisualChangeTs { get; set; }

    //    [JsonProperty("observedLastVisualChange", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? ObservedLastVisualChange { get; set; }

    //    [JsonProperty("observedLastVisualChangeTs", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? ObservedLastVisualChangeTs { get; set; }

    //    [JsonProperty("observedLoad", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? ObservedLoad { get; set; }

    //    [JsonProperty("observedLoadTs", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? ObservedLoadTs { get; set; }

    //    [JsonProperty("observedNavigationStart", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? ObservedNavigationStart { get; set; }

    //    [JsonProperty("observedNavigationStartTs", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? ObservedNavigationStartTs { get; set; }

    //    [JsonProperty("observedSpeedIndex", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? ObservedSpeedIndex { get; set; }

    //    [JsonProperty("observedSpeedIndexTs", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? ObservedSpeedIndexTs { get; set; }

    //    [JsonProperty("observedTraceEnd", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? ObservedTraceEnd { get; set; }

    //    [JsonProperty("observedTraceEndTs", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? ObservedTraceEndTs { get; set; }

    //    [JsonProperty("origin", NullValueHandling = NullValueHandling.Ignore)]
    //    public Uri Origin { get; set; }

    //    [JsonProperty("outerHTML", NullValueHandling = NullValueHandling.Ignore)]
    //    public string OuterHtml { get; set; }

    //    [JsonProperty("overlappingTarget", NullValueHandling = NullValueHandling.Ignore)]
    //    public Node OverlappingTarget { get; set; }

    //    [JsonProperty("overlappingTargetScore", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? OverlappingTargetScore { get; set; }

    //    [JsonProperty("overlapScoreRatio", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? OverlapScoreRatio { get; set; }

    //    [JsonProperty("parseFailureReason", NullValueHandling = NullValueHandling.Ignore)]
    //    public string ParseFailureReason { get; set; }

    //    [JsonProperty("protocol", NullValueHandling = NullValueHandling.Ignore)]
    //    public string Protocol { get; set; }

    //    [JsonProperty("rel", NullValueHandling = NullValueHandling.Ignore)]
    //    public string Rel { get; set; }

    //    [JsonProperty("requestCount", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? RequestCount { get; set; }

    //    [JsonProperty("requestStartTime", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? RequestStartTime { get; set; }

    //    [JsonProperty("resourceSize", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? ResourceSize { get; set; }

    //    [JsonProperty("resourceType", NullValueHandling = NullValueHandling.Ignore)]
    //    public string ResourceType { get; set; }

    //    [JsonProperty("rtt", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? Rtt { get; set; }

    //    [JsonProperty("scripting", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? Scripting { get; set; }

    //    [JsonProperty("scriptParseCompile", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? ScriptParseCompile { get; set; }

    //    [JsonProperty("selector", NullValueHandling = NullValueHandling.Ignore)]
    //    public string Selector { get; set; }

    //    [JsonProperty("serverResponseTime", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? ServerResponseTime { get; set; }

    //    [JsonProperty("size", NullValueHandling = NullValueHandling.Ignore)]
    //    public Size? Size { get; set; }

    //    [JsonProperty("source", NullValueHandling = NullValueHandling.Ignore)]
    //    public string Source { get; set; }

    //    [JsonProperty("speedIndex", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? SpeedIndex { get; set; }

    //    [JsonProperty("startTime", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? StartTime { get; set; }

    //    [JsonProperty("statistic", NullValueHandling = NullValueHandling.Ignore)]
    //    public string Statistic { get; set; }

    //    [JsonProperty("statusCode", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? StatusCode { get; set; }

    //    [JsonProperty("tapTarget", NullValueHandling = NullValueHandling.Ignore)]
    //    public Node TapTarget { get; set; }

    //    [JsonProperty("tapTargetScore", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? TapTargetScore { get; set; }

    //    [JsonProperty("target", NullValueHandling = NullValueHandling.Ignore)]
    //    public string Target { get; set; }

    //    [JsonProperty("themeColor")]
    //    public object ThemeColor { get; set; }

    //    [JsonProperty("throughput", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? Throughput { get; set; }

    //    [JsonProperty("timestamp", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? Timestamp { get; set; }

    //    [JsonProperty("timing", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? Timing { get; set; }

    //    [JsonProperty("timingType", NullValueHandling = NullValueHandling.Ignore)]
    //    public TimingType? TimingType { get; set; }

    //    [JsonProperty("total", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? Total { get; set; }

    //    [JsonProperty("totalBlockingTime", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? TotalBlockingTime { get; set; }

    //    [JsonProperty("totalBytes", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? TotalBytes { get; set; }

    //    [JsonProperty("totalByteWeight", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? TotalByteWeight { get; set; }

    //    [JsonProperty("totalTaskTime", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? TotalTaskTime { get; set; }

    //    [JsonProperty("transferSize", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? TransferSize { get; set; }

    //    [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
    //    public string Url { get; set; }

    //    [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
    //    public string Value { get; set; }

    //    [JsonProperty("version", NullValueHandling = NullValueHandling.Ignore)]
    //    public string Version { get; set; }

    //    [JsonProperty("vulnCount", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? VulnCount { get; set; }

    //    [JsonProperty("wastedBytes", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? WastedBytes { get; set; }

    //    [JsonProperty("wastedMs", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? WastedMs { get; set; }

    //    [JsonProperty("wastedPercent", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? WastedPercent { get; set; }

    //    [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
    //    public long? Width { get; set; }
    //}

    //public class ItemDebugData
    //{
    //    [JsonProperty("max-age")]
    //    public long MaxAge { get; set; }

    //    [JsonProperty("public", NullValueHandling = NullValueHandling.Ignore)]
    //    public bool? Public { get; set; }

    //    [JsonProperty("type")]
    //    public DebugDataType Type { get; set; }
    //}

    //public class DetectedLib
    //{
    //    [JsonProperty("text")]
    //    public string Text { get; set; }

    //    [JsonProperty("type")]
    //    public ItemTypeEnum Type { get; set; }

    //    [JsonProperty("url")]
    //    public string Url { get; set; }
    //}

    //public class ElementClass
    //{
    //    [JsonProperty("type")]
    //    public ItemTypeEnum Type { get; set; }

    //    [JsonProperty("value")]
    //    public string Value { get; set; }
    //}

    //public class Node
    //{
    //    [JsonProperty("explanation", NullValueHandling = NullValueHandling.Ignore)]
    //    public string Explanation { get; set; }

    //    [JsonProperty("nodeLabel")]
    //    public string NodeLabel { get; set; }

    //    [JsonProperty("path")]
    //    public string Path { get; set; }

    //    [JsonProperty("selector")]
    //    public string Selector { get; set; }

    //    [JsonProperty("snippet")]
    //    public string Snippet { get; set; }

    //    [JsonProperty("type")]
    //    public ItemTypeEnum Type { get; set; }
    //}

    //public class LongestChain
    //{
    //    [JsonProperty("duration")]
    //    public double Duration { get; set; }

    //    [JsonProperty("length")]
    //    public long Length { get; set; }

    //    [JsonProperty("transferSize")]
    //    public long TransferSize { get; set; }
    //}

    //public class Summary
    //{
    //    [JsonProperty("wastedBytes", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? WastedBytes { get; set; }

    //    [JsonProperty("wastedMs", NullValueHandling = NullValueHandling.Ignore)]
    //    public double? WastedMs { get; set; }
    //}

    //public class Environment
    //{
    //    [JsonProperty("benchmarkIndex")]
    //    public long BenchmarkIndex { get; set; }

    //    [JsonProperty("hostUserAgent")]
    //    public string HostUserAgent { get; set; }

    //    [JsonProperty("networkUserAgent")]
    //    public string NetworkUserAgent { get; set; }
    //}

    //public enum DebugDataType
    //{
    //    Criticalrequestchain,

    //    Debugdata,

    //    Filmstrip,

    //    Opportunity,

    //    Screenshot,

    //    Table
    //}

    //public enum ItemTypeEnum
    //{
    //    Bytes,

    //    Code,

    //    Link,

    //    Ms,

    //    Node,

    //    Numeric,

    //    Text,

    //    Url
    //}

    //public enum Label
    //{
    //    Empty,

    //    PotentialSavings,

    //    Size,

    //    Url
    //}

    //public enum ValueType
    //{
    //    Bytes,

    //    Thumbnail,

    //    TimespanMs,

    //    Url
    //}

    //public enum TimingType
    //{
    //    Mark,

    //    Measure
    //}

    //public enum ScoreDisplayMode
    //{
    //    Binary,

    //    Informative,

    //    Manual,

    //    NotApplicable,

    //    Numeric
    //}

    //public struct ElementUnion
    //{
    //    public ElementClass ElementClass;

    //    public string String;

    //    public static implicit operator ElementUnion(ElementClass ElementClass)
    //    {
    //        return new ElementUnion { ElementClass = ElementClass };
    //    }

    //    public static implicit operator ElementUnion(string String)
    //    {
    //        return new ElementUnion { String = String };
    //    }
    //}

    //public struct Size
    //{
    //    public long? Integer;

    //    public string String;

    //    public static implicit operator Size(long Integer)
    //    {
    //        return new Size { Integer = Integer };
    //    }

    //    public static implicit operator Size(string String)
    //    {
    //        return new Size { String = String };
    //    }
    //}

    //public partial class OutputModelRoot
    //{
    //    public static OutputModelRoot FromJson(string json)
    //    {
    //        return JsonConvert.DeserializeObject<OutputModelRoot>(json, Converter.Settings);
    //    }
    //}

    //public static class Serialize
    //{
    //    public static string ToJson(this OutputModelRoot self)
    //    {
    //        return JsonConvert.SerializeObject(self, Converter.Settings);
    //    }
    //}

    //internal static class Converter
    //{
    //    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    //                                                                 {
    //                                                                     MetadataPropertyHandling =
    //                                                                         MetadataPropertyHandling.Ignore,
    //                                                                     DateParseHandling = DateParseHandling.None,
    //                                                                     Converters =
    //                                                                         {
    //                                                                             DebugDataTypeConverter.Singleton,
    //                                                                             ItemTypeEnumConverter.Singleton,
    //                                                                             LabelConverter.Singleton,
    //                                                                             ValueTypeConverter.Singleton,
    //                                                                             ElementUnionConverter.Singleton,
    //                                                                             SizeConverter.Singleton,
    //                                                                             TimingTypeConverter.Singleton,
    //                                                                             ScoreDisplayModeConverter.Singleton,
    //                                                                             new IsoDateTimeConverter
    //                                                                                 {
    //                                                                                     DateTimeStyles =
    //                                                                                         DateTimeStyles
    //                                                                                             .AssumeUniversal
    //                                                                                 }
    //                                                                         }
    //                                                                 };
    //}

    //internal class DebugDataTypeConverter : JsonConverter
    //{
    //    public static readonly DebugDataTypeConverter Singleton = new DebugDataTypeConverter();

    //    public override bool CanConvert(Type t)
    //    {
    //        return t == typeof(DebugDataType) || t == typeof(DebugDataType?);
    //    }

    //    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    //    {
    //        if (reader.TokenType == JsonToken.Null) return null;
    //        var value = serializer.Deserialize<string>(reader);
    //        switch (value)
    //        {
    //            case "criticalrequestchain":
    //                return DebugDataType.Criticalrequestchain;
    //            case "debugdata":
    //                return DebugDataType.Debugdata;
    //            case "filmstrip":
    //                return DebugDataType.Filmstrip;
    //            case "opportunity":
    //                return DebugDataType.Opportunity;
    //            case "screenshot":
    //                return DebugDataType.Screenshot;
    //            case "table":
    //                return DebugDataType.Table;
    //        }

    //        throw new Exception("Cannot unmarshal type DebugDataType");
    //    }

    //    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    //    {
    //        if (untypedValue == null)
    //        {
    //            serializer.Serialize(writer, null);
    //            return;
    //        }

    //        var value = (DebugDataType)untypedValue;
    //        switch (value)
    //        {
    //            case DebugDataType.Criticalrequestchain:
    //                serializer.Serialize(writer, "criticalrequestchain");
    //                return;
    //            case DebugDataType.Debugdata:
    //                serializer.Serialize(writer, "debugdata");
    //                return;
    //            case DebugDataType.Filmstrip:
    //                serializer.Serialize(writer, "filmstrip");
    //                return;
    //            case DebugDataType.Opportunity:
    //                serializer.Serialize(writer, "opportunity");
    //                return;
    //            case DebugDataType.Screenshot:
    //                serializer.Serialize(writer, "screenshot");
    //                return;
    //            case DebugDataType.Table:
    //                serializer.Serialize(writer, "table");
    //                return;
    //        }

    //        throw new Exception("Cannot marshal type DebugDataType");
    //    }
    //}

    //internal class ItemTypeEnumConverter : JsonConverter
    //{
    //    public static readonly ItemTypeEnumConverter Singleton = new ItemTypeEnumConverter();

    //    public override bool CanConvert(Type t)
    //    {
    //        return t == typeof(ItemTypeEnum) || t == typeof(ItemTypeEnum?);
    //    }

    //    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    //    {
    //        if (reader.TokenType == JsonToken.Null) return null;
    //        var value = serializer.Deserialize<string>(reader);
    //        switch (value)
    //        {
    //            case "bytes":
    //                return ItemTypeEnum.Bytes;
    //            case "code":
    //                return ItemTypeEnum.Code;
    //            case "link":
    //                return ItemTypeEnum.Link;
    //            case "ms":
    //                return ItemTypeEnum.Ms;
    //            case "node":
    //                return ItemTypeEnum.Node;
    //            case "numeric":
    //                return ItemTypeEnum.Numeric;
    //            case "text":
    //                return ItemTypeEnum.Text;
    //            case "url":
    //                return ItemTypeEnum.Url;
    //        }

    //        throw new Exception("Cannot unmarshal type ItemTypeEnum");
    //    }

    //    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    //    {
    //        if (untypedValue == null)
    //        {
    //            serializer.Serialize(writer, null);
    //            return;
    //        }

    //        var value = (ItemTypeEnum)untypedValue;
    //        switch (value)
    //        {
    //            case ItemTypeEnum.Bytes:
    //                serializer.Serialize(writer, "bytes");
    //                return;
    //            case ItemTypeEnum.Code:
    //                serializer.Serialize(writer, "code");
    //                return;
    //            case ItemTypeEnum.Link:
    //                serializer.Serialize(writer, "link");
    //                return;
    //            case ItemTypeEnum.Ms:
    //                serializer.Serialize(writer, "ms");
    //                return;
    //            case ItemTypeEnum.Node:
    //                serializer.Serialize(writer, "node");
    //                return;
    //            case ItemTypeEnum.Numeric:
    //                serializer.Serialize(writer, "numeric");
    //                return;
    //            case ItemTypeEnum.Text:
    //                serializer.Serialize(writer, "text");
    //                return;
    //            case ItemTypeEnum.Url:
    //                serializer.Serialize(writer, "url");
    //                return;
    //        }

    //        throw new Exception("Cannot marshal type ItemTypeEnum");
    //    }
    //}

    //internal class LabelConverter : JsonConverter
    //{
    //    public static readonly LabelConverter Singleton = new LabelConverter();

    //    public override bool CanConvert(Type t)
    //    {
    //        return t == typeof(Label) || t == typeof(Label?);
    //    }

    //    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    //    {
    //        if (reader.TokenType == JsonToken.Null) return null;
    //        var value = serializer.Deserialize<string>(reader);
    //        switch (value)
    //        {
    //            case "":
    //                return Label.Empty;
    //            case "Potential Savings":
    //                return Label.PotentialSavings;
    //            case "Size":
    //                return Label.Size;
    //            case "URL":
    //                return Label.Url;
    //        }

    //        throw new Exception("Cannot unmarshal type Label");
    //    }

    //    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    //    {
    //        if (untypedValue == null)
    //        {
    //            serializer.Serialize(writer, null);
    //            return;
    //        }

    //        var value = (Label)untypedValue;
    //        switch (value)
    //        {
    //            case Label.Empty:
    //                serializer.Serialize(writer, string.Empty);
    //                return;
    //            case Label.PotentialSavings:
    //                serializer.Serialize(writer, "Potential Savings");
    //                return;
    //            case Label.Size:
    //                serializer.Serialize(writer, "Size");
    //                return;
    //            case Label.Url:
    //                serializer.Serialize(writer, "URL");
    //                return;
    //        }

    //        throw new Exception("Cannot marshal type Label");
    //    }
    //}

    //internal class ValueTypeConverter : JsonConverter
    //{
    //    public static readonly ValueTypeConverter Singleton = new ValueTypeConverter();

    //    public override bool CanConvert(Type t)
    //    {
    //        return t == typeof(ValueType) || t == typeof(ValueType?);
    //    }

    //    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    //    {
    //        if (reader.TokenType == JsonToken.Null) return null;
    //        var value = serializer.Deserialize<string>(reader);
    //        switch (value)
    //        {
    //            case "bytes":
    //                return ValueType.Bytes;
    //            case "thumbnail":
    //                return ValueType.Thumbnail;
    //            case "timespanMs":
    //                return ValueType.TimespanMs;
    //            case "url":
    //                return ValueType.Url;
    //        }

    //        throw new Exception("Cannot unmarshal type ValueType");
    //    }

    //    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    //    {
    //        if (untypedValue == null)
    //        {
    //            serializer.Serialize(writer, null);
    //            return;
    //        }

    //        var value = (ValueType)untypedValue;
    //        switch (value)
    //        {
    //            case ValueType.Bytes:
    //                serializer.Serialize(writer, "bytes");
    //                return;
    //            case ValueType.Thumbnail:
    //                serializer.Serialize(writer, "thumbnail");
    //                return;
    //            case ValueType.TimespanMs:
    //                serializer.Serialize(writer, "timespanMs");
    //                return;
    //            case ValueType.Url:
    //                serializer.Serialize(writer, "url");
    //                return;
    //        }

    //        throw new Exception("Cannot marshal type ValueType");
    //    }
    //}

    //internal class ElementUnionConverter : JsonConverter
    //{
    //    public static readonly ElementUnionConverter Singleton = new ElementUnionConverter();

    //    public override bool CanConvert(Type t)
    //    {
    //        return t == typeof(ElementUnion) || t == typeof(ElementUnion?);
    //    }

    //    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    //    {
    //        switch (reader.TokenType)
    //        {
    //            case JsonToken.String:
    //            case JsonToken.Date:
    //                var stringValue = serializer.Deserialize<string>(reader);
    //                return new ElementUnion { String = stringValue };
    //            case JsonToken.StartObject:
    //                var objectValue = serializer.Deserialize<ElementClass>(reader);
    //                return new ElementUnion { ElementClass = objectValue };
    //        }

    //        throw new Exception("Cannot unmarshal type ElementUnion");
    //    }

    //    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    //    {
    //        var value = (ElementUnion)untypedValue;
    //        if (value.String != null)
    //        {
    //            serializer.Serialize(writer, value.String);
    //            return;
    //        }

    //        if (value.ElementClass != null)
    //        {
    //            serializer.Serialize(writer, value.ElementClass);
    //            return;
    //        }

    //        throw new Exception("Cannot marshal type ElementUnion");
    //    }
    //}

    //internal class SizeConverter : JsonConverter
    //{
    //    public static readonly SizeConverter Singleton = new SizeConverter();

    //    public override bool CanConvert(Type t)
    //    {
    //        return t == typeof(Size) || t == typeof(Size?);
    //    }

    //    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    //    {
    //        switch (reader.TokenType)
    //        {
    //            case JsonToken.Integer:
    //                var integerValue = serializer.Deserialize<long>(reader);
    //                return new Size { Integer = integerValue };
    //            case JsonToken.String:
    //            case JsonToken.Date:
    //                var stringValue = serializer.Deserialize<string>(reader);
    //                return new Size { String = stringValue };
    //        }

    //        throw new Exception("Cannot unmarshal type Size");
    //    }

    //    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    //    {
    //        var value = (Size)untypedValue;
    //        if (value.Integer != null)
    //        {
    //            serializer.Serialize(writer, value.Integer.Value);
    //            return;
    //        }

    //        if (value.String != null)
    //        {
    //            serializer.Serialize(writer, value.String);
    //            return;
    //        }

    //        throw new Exception("Cannot marshal type Size");
    //    }
    //}

    //internal class TimingTypeConverter : JsonConverter
    //{
    //    public static readonly TimingTypeConverter Singleton = new TimingTypeConverter();

    //    public override bool CanConvert(Type t)
    //    {
    //        return t == typeof(TimingType) || t == typeof(TimingType?);
    //    }

    //    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    //    {
    //        if (reader.TokenType == JsonToken.Null) return null;
    //        var value = serializer.Deserialize<string>(reader);
    //        switch (value)
    //        {
    //            case "Mark":
    //                return TimingType.Mark;
    //            case "Measure":
    //                return TimingType.Measure;
    //        }

    //        throw new Exception("Cannot unmarshal type TimingType");
    //    }

    //    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    //    {
    //        if (untypedValue == null)
    //        {
    //            serializer.Serialize(writer, null);
    //            return;
    //        }

    //        var value = (TimingType)untypedValue;
    //        switch (value)
    //        {
    //            case TimingType.Mark:
    //                serializer.Serialize(writer, "Mark");
    //                return;
    //            case TimingType.Measure:
    //                serializer.Serialize(writer, "Measure");
    //                return;
    //        }

    //        throw new Exception("Cannot marshal type TimingType");
    //    }
    //}

    //internal class ScoreDisplayModeConverter : JsonConverter
    //{
    //    public static readonly ScoreDisplayModeConverter Singleton = new ScoreDisplayModeConverter();

    //    public override bool CanConvert(Type t)
    //    {
    //        return t == typeof(ScoreDisplayMode) || t == typeof(ScoreDisplayMode?);
    //    }

    //    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    //    {
    //        if (reader.TokenType == JsonToken.Null) return null;
    //        var value = serializer.Deserialize<string>(reader);
    //        switch (value)
    //        {
    //            case "binary":
    //                return ScoreDisplayMode.Binary;
    //            case "informative":
    //                return ScoreDisplayMode.Informative;
    //            case "manual":
    //                return ScoreDisplayMode.Manual;
    //            case "notApplicable":
    //                return ScoreDisplayMode.NotApplicable;
    //            case "numeric":
    //                return ScoreDisplayMode.Numeric;
    //        }

    //        throw new Exception("Cannot unmarshal type ScoreDisplayMode");
    //    }

    //    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    //    {
    //        if (untypedValue == null)
    //        {
    //            serializer.Serialize(writer, null);
    //            return;
    //        }

    //        var value = (ScoreDisplayMode)untypedValue;
    //        switch (value)
    //        {
    //            case ScoreDisplayMode.Binary:
    //                serializer.Serialize(writer, "binary");
    //                return;
    //            case ScoreDisplayMode.Informative:
    //                serializer.Serialize(writer, "informative");
    //                return;
    //            case ScoreDisplayMode.Manual:
    //                serializer.Serialize(writer, "manual");
    //                return;
    //            case ScoreDisplayMode.NotApplicable:
    //                serializer.Serialize(writer, "notApplicable");
    //                return;
    //            case ScoreDisplayMode.Numeric:
    //                serializer.Serialize(writer, "numeric");
    //                return;
    //        }

    //        throw new Exception("Cannot marshal type ScoreDisplayMode");
    //    }
    //}
}