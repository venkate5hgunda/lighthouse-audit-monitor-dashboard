//using System;
//using System.Collections.Generic;
//using System.Globalization;
//using Newtonsoft.Json;
//using Newtonsoft.Json.Converters;

//// <auto-generated />
////
//// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
////
////    using LighthouseAuditAggregator;
////
////    var welcome = Welcome.FromJson(jsonString);

//namespace LighthouseAuditAggregator
//{
//    public partial class Welcome
//    {
//        [JsonProperty("audit")]
//        public Audit Audit { get; set; }
//    }

//    public class Audit
//    {
//        [JsonProperty("id")]
//        public string Id { get; set; }

//        [JsonProperty("title")]
//        public string Title { get; set; }

//        [JsonProperty("description")]
//        public string Description { get; set; }

//        [JsonProperty("score")]
//        public double? Score { get; set; }

//        [JsonProperty("scoreDisplayMode")]
//        public ScoreDisplayMode ScoreDisplayMode { get; set; }

//        [JsonProperty("displayValue", NullValueHandling = NullValueHandling.Ignore)]
//        public string DisplayValue { get; set; }

//        [JsonProperty("warnings", NullValueHandling = NullValueHandling.Ignore)]
//        public List<string> Warnings { get; set; }

//        [JsonProperty("details", NullValueHandling = NullValueHandling.Ignore)]
//        public Details Details { get; set; }

//        [JsonProperty("numericValue", NullValueHandling = NullValueHandling.Ignore)]
//        public double? NumericValue { get; set; }

//        [JsonProperty("explanation", NullValueHandling = NullValueHandling.Ignore)]
//        public string Explanation { get; set; }
//    }

//    public partial class Details
//    {
//        [JsonProperty("type")]
//        public DebugDataType Type { get; set; }

//        [JsonProperty("headings", NullValueHandling = NullValueHandling.Ignore)]
//        public List<Heading> Headings { get; set; }

//        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
//        public List<Item> Items { get; set; }

//        [JsonProperty("summary", NullValueHandling = NullValueHandling.Ignore)]
//        public Summary Summary { get; set; }

//        [JsonProperty("debugData", NullValueHandling = NullValueHandling.Ignore)]
//        public DetailsDebugData DebugData { get; set; }

//        [JsonProperty("chains", NullValueHandling = NullValueHandling.Ignore)]
//        public Chains Chains { get; set; }

//        [JsonProperty("longestChain", NullValueHandling = NullValueHandling.Ignore)]
//        public LongestChain LongestChain { get; set; }

//        [JsonProperty("overallSavingsMs", NullValueHandling = NullValueHandling.Ignore)]
//        public double? OverallSavingsMs { get; set; }

//        [JsonProperty("overallSavingsBytes", NullValueHandling = NullValueHandling.Ignore)]
//        public long? OverallSavingsBytes { get; set; }

//        [JsonProperty("timing", NullValueHandling = NullValueHandling.Ignore)]
//        public long? Timing { get; set; }

//        [JsonProperty("timestamp", NullValueHandling = NullValueHandling.Ignore)]
//        public long? Timestamp { get; set; }

//        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
//        public string Data { get; set; }

//        [JsonProperty("scale", NullValueHandling = NullValueHandling.Ignore)]
//        public long? Scale { get; set; }
//    }

//    public partial class Chains
//    {
//        [JsonProperty("91A70AD299CACBDAFFBAED8F7698F985")]
//        public The91A70Ad299Cacbdaffbaed8F7698F985 The91A70Ad299Cacbdaffbaed8F7698F985 { get; set; }
//    }

//    public partial class The91A70Ad299Cacbdaffbaed8F7698F985
//    {
//        [JsonProperty("request")]
//        public Request Request { get; set; }

//        [JsonProperty("children")]
//        public Dictionary<string, Child> Children { get; set; }
//    }

//    public partial class Child
//    {
//        [JsonProperty("request")]
//        public Request Request { get; set; }
//    }

//    public partial class Request
//    {
//        [JsonProperty("url")]
//        public Uri Url { get; set; }

//        [JsonProperty("startTime")]
//        public double StartTime { get; set; }

//        [JsonProperty("endTime")]
//        public double EndTime { get; set; }

//        [JsonProperty("responseReceivedTime")]
//        public double ResponseReceivedTime { get; set; }

//        [JsonProperty("transferSize")]
//        public long TransferSize { get; set; }
//    }

//    public partial class DetailsDebugData
//    {
//        [JsonProperty("type")]
//        public DebugDataType Type { get; set; }

//        [JsonProperty("impact")]
//        public string Impact { get; set; }

//        [JsonProperty("tags")]
//        public List<string> Tags { get; set; }
//    }

//    public partial class Heading
//    {
//        [JsonProperty("key")]
//        public string Key { get; set; }

//        [JsonProperty("itemType", NullValueHandling = NullValueHandling.Ignore)]
//        public ItemTypeEnum? ItemType { get; set; }

//        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
//        public string Text { get; set; }

//        [JsonProperty("granularity", NullValueHandling = NullValueHandling.Ignore)]
//        public double? Granularity { get; set; }

//        [JsonProperty("displayUnit", NullValueHandling = NullValueHandling.Ignore)]
//        public string DisplayUnit { get; set; }

//        [JsonProperty("valueType", NullValueHandling = NullValueHandling.Ignore)]
//        public ValueType? ValueType { get; set; }

//        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
//        public Label? Label { get; set; }
//    }

//    public partial class Item
//    {
//        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
//        public string Url { get; set; }

//        [JsonProperty("total", NullValueHandling = NullValueHandling.Ignore)]
//        public double? Total { get; set; }

//        [JsonProperty("scripting", NullValueHandling = NullValueHandling.Ignore)]
//        public double? Scripting { get; set; }

//        [JsonProperty("scriptParseCompile", NullValueHandling = NullValueHandling.Ignore)]
//        public double? ScriptParseCompile { get; set; }

//        [JsonProperty("node", NullValueHandling = NullValueHandling.Ignore)]
//        public Node Node { get; set; }

//        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
//        public string Value { get; set; }

//        [JsonProperty("source", NullValueHandling = NullValueHandling.Ignore)]
//        public string Source { get; set; }

//        [JsonProperty("lineNumber", NullValueHandling = NullValueHandling.Ignore)]
//        public long? LineNumber { get; set; }

//        [JsonProperty("numRequests", NullValueHandling = NullValueHandling.Ignore)]
//        public long? NumRequests { get; set; }

//        [JsonProperty("numScripts", NullValueHandling = NullValueHandling.Ignore)]
//        public long? NumScripts { get; set; }

//        [JsonProperty("numStylesheets", NullValueHandling = NullValueHandling.Ignore)]
//        public long? NumStylesheets { get; set; }

//        [JsonProperty("numFonts", NullValueHandling = NullValueHandling.Ignore)]
//        public long? NumFonts { get; set; }

//        [JsonProperty("numTasks", NullValueHandling = NullValueHandling.Ignore)]
//        public long? NumTasks { get; set; }

//        [JsonProperty("numTasksOver10ms", NullValueHandling = NullValueHandling.Ignore)]
//        public long? NumTasksOver10Ms { get; set; }

//        [JsonProperty("numTasksOver25ms", NullValueHandling = NullValueHandling.Ignore)]
//        public long? NumTasksOver25Ms { get; set; }

//        [JsonProperty("numTasksOver50ms", NullValueHandling = NullValueHandling.Ignore)]
//        public long? NumTasksOver50Ms { get; set; }

//        [JsonProperty("numTasksOver100ms", NullValueHandling = NullValueHandling.Ignore)]
//        public long? NumTasksOver100Ms { get; set; }

//        [JsonProperty("numTasksOver500ms", NullValueHandling = NullValueHandling.Ignore)]
//        public long? NumTasksOver500Ms { get; set; }

//        [JsonProperty("rtt", NullValueHandling = NullValueHandling.Ignore)]
//        public double? Rtt { get; set; }

//        [JsonProperty("throughput", NullValueHandling = NullValueHandling.Ignore)]
//        public double? Throughput { get; set; }

//        [JsonProperty("maxRtt", NullValueHandling = NullValueHandling.Ignore)]
//        public double? MaxRtt { get; set; }

//        [JsonProperty("maxServerLatency", NullValueHandling = NullValueHandling.Ignore)]
//        public double? MaxServerLatency { get; set; }

//        [JsonProperty("totalByteWeight", NullValueHandling = NullValueHandling.Ignore)]
//        public long? TotalByteWeight { get; set; }

//        [JsonProperty("totalTaskTime", NullValueHandling = NullValueHandling.Ignore)]
//        public double? TotalTaskTime { get; set; }

//        [JsonProperty("mainDocumentTransferSize", NullValueHandling = NullValueHandling.Ignore)]
//        public long? MainDocumentTransferSize { get; set; }

//        [JsonProperty("statistic", NullValueHandling = NullValueHandling.Ignore)]
//        public string Statistic { get; set; }

//        [JsonProperty("element", NullValueHandling = NullValueHandling.Ignore)]
//        public ElementUnion? Element { get; set; }

//        [JsonProperty("href", NullValueHandling = NullValueHandling.Ignore)]
//        public Uri Href { get; set; }

//        [JsonProperty("target", NullValueHandling = NullValueHandling.Ignore)]
//        public string Target { get; set; }

//        [JsonProperty("rel", NullValueHandling = NullValueHandling.Ignore)]
//        public string Rel { get; set; }

//        [JsonProperty("outerHTML", NullValueHandling = NullValueHandling.Ignore)]
//        public string OuterHtml { get; set; }

//        [JsonProperty("selector", NullValueHandling = NullValueHandling.Ignore)]
//        public string Selector { get; set; }

//        [JsonProperty("coverage", NullValueHandling = NullValueHandling.Ignore)]
//        public string Coverage { get; set; }

//        [JsonProperty("fontSize", NullValueHandling = NullValueHandling.Ignore)]
//        public string FontSize { get; set; }

//        [JsonProperty("failures", NullValueHandling = NullValueHandling.Ignore)]
//        public List<string> Failures { get; set; }

//        [JsonProperty("isParseFailure", NullValueHandling = NullValueHandling.Ignore)]
//        public bool? IsParseFailure { get; set; }

//        [JsonProperty("parseFailureReason", NullValueHandling = NullValueHandling.Ignore)]
//        public string ParseFailureReason { get; set; }

//        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        [JsonProperty("version", NullValueHandling = NullValueHandling.Ignore)]
//        public string Version { get; set; }

//        [JsonProperty("npm", NullValueHandling = NullValueHandling.Ignore)]
//        public string Npm { get; set; }

//        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
//        public double? Duration { get; set; }

//        [JsonProperty("startTime", NullValueHandling = NullValueHandling.Ignore)]
//        public double? StartTime { get; set; }

//        [JsonProperty("group", NullValueHandling = NullValueHandling.Ignore)]
//        public string Group { get; set; }

//        [JsonProperty("groupLabel", NullValueHandling = NullValueHandling.Ignore)]
//        public string GroupLabel { get; set; }

//        [JsonProperty("firstContentfulPaint", NullValueHandling = NullValueHandling.Ignore)]
//        public long? FirstContentfulPaint { get; set; }

//        [JsonProperty("firstMeaningfulPaint", NullValueHandling = NullValueHandling.Ignore)]
//        public long? FirstMeaningfulPaint { get; set; }

//        [JsonProperty("firstCPUIdle", NullValueHandling = NullValueHandling.Ignore)]
//        public long? FirstCpuIdle { get; set; }

//        [JsonProperty("interactive", NullValueHandling = NullValueHandling.Ignore)]
//        public long? Interactive { get; set; }

//        [JsonProperty("speedIndex", NullValueHandling = NullValueHandling.Ignore)]
//        public long? SpeedIndex { get; set; }

//        [JsonProperty("estimatedInputLatency", NullValueHandling = NullValueHandling.Ignore)]
//        public long? EstimatedInputLatency { get; set; }

//        [JsonProperty("totalBlockingTime", NullValueHandling = NullValueHandling.Ignore)]
//        public long? TotalBlockingTime { get; set; }

//        [JsonProperty("observedNavigationStart", NullValueHandling = NullValueHandling.Ignore)]
//        public long? ObservedNavigationStart { get; set; }

//        [JsonProperty("observedNavigationStartTs", NullValueHandling = NullValueHandling.Ignore)]
//        public long? ObservedNavigationStartTs { get; set; }

//        [JsonProperty("observedFirstPaint", NullValueHandling = NullValueHandling.Ignore)]
//        public long? ObservedFirstPaint { get; set; }

//        [JsonProperty("observedFirstPaintTs", NullValueHandling = NullValueHandling.Ignore)]
//        public long? ObservedFirstPaintTs { get; set; }

//        [JsonProperty("observedFirstContentfulPaint", NullValueHandling = NullValueHandling.Ignore)]
//        public long? ObservedFirstContentfulPaint { get; set; }

//        [JsonProperty("observedFirstContentfulPaintTs", NullValueHandling = NullValueHandling.Ignore)]
//        public long? ObservedFirstContentfulPaintTs { get; set; }

//        [JsonProperty("observedFirstMeaningfulPaint", NullValueHandling = NullValueHandling.Ignore)]
//        public long? ObservedFirstMeaningfulPaint { get; set; }

//        [JsonProperty("observedFirstMeaningfulPaintTs", NullValueHandling = NullValueHandling.Ignore)]
//        public long? ObservedFirstMeaningfulPaintTs { get; set; }

//        [JsonProperty("observedTraceEnd", NullValueHandling = NullValueHandling.Ignore)]
//        public long? ObservedTraceEnd { get; set; }

//        [JsonProperty("observedTraceEndTs", NullValueHandling = NullValueHandling.Ignore)]
//        public long? ObservedTraceEndTs { get; set; }

//        [JsonProperty("observedLoad", NullValueHandling = NullValueHandling.Ignore)]
//        public long? ObservedLoad { get; set; }

//        [JsonProperty("observedLoadTs", NullValueHandling = NullValueHandling.Ignore)]
//        public long? ObservedLoadTs { get; set; }

//        [JsonProperty("observedDomContentLoaded", NullValueHandling = NullValueHandling.Ignore)]
//        public long? ObservedDomContentLoaded { get; set; }

//        [JsonProperty("observedDomContentLoadedTs", NullValueHandling = NullValueHandling.Ignore)]
//        public long? ObservedDomContentLoadedTs { get; set; }

//        [JsonProperty("observedFirstVisualChange", NullValueHandling = NullValueHandling.Ignore)]
//        public long? ObservedFirstVisualChange { get; set; }

//        [JsonProperty("observedFirstVisualChangeTs", NullValueHandling = NullValueHandling.Ignore)]
//        public long? ObservedFirstVisualChangeTs { get; set; }

//        [JsonProperty("observedLastVisualChange", NullValueHandling = NullValueHandling.Ignore)]
//        public long? ObservedLastVisualChange { get; set; }

//        [JsonProperty("observedLastVisualChangeTs", NullValueHandling = NullValueHandling.Ignore)]
//        public long? ObservedLastVisualChangeTs { get; set; }

//        [JsonProperty("observedSpeedIndex", NullValueHandling = NullValueHandling.Ignore)]
//        public long? ObservedSpeedIndex { get; set; }

//        [JsonProperty("observedSpeedIndexTs", NullValueHandling = NullValueHandling.Ignore)]
//        public long? ObservedSpeedIndexTs { get; set; }

//        [JsonProperty("endTime", NullValueHandling = NullValueHandling.Ignore)]
//        public double? EndTime { get; set; }

//        [JsonProperty("transferSize", NullValueHandling = NullValueHandling.Ignore)]
//        public long? TransferSize { get; set; }

//        [JsonProperty("resourceSize", NullValueHandling = NullValueHandling.Ignore)]
//        public long? ResourceSize { get; set; }

//        [JsonProperty("statusCode", NullValueHandling = NullValueHandling.Ignore)]
//        public long? StatusCode { get; set; }

//        [JsonProperty("mimeType", NullValueHandling = NullValueHandling.Ignore)]
//        public string MimeType { get; set; }

//        [JsonProperty("resourceType", NullValueHandling = NullValueHandling.Ignore)]
//        public string ResourceType { get; set; }

//        [JsonProperty("origin", NullValueHandling = NullValueHandling.Ignore)]
//        public Uri Origin { get; set; }

//        [JsonProperty("serverResponseTime", NullValueHandling = NullValueHandling.Ignore)]
//        public double? ServerResponseTime { get; set; }

//        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
//        public string Label { get; set; }

//        [JsonProperty("highestSeverity", NullValueHandling = NullValueHandling.Ignore)]
//        public string HighestSeverity { get; set; }

//        [JsonProperty("vulnCount", NullValueHandling = NullValueHandling.Ignore)]
//        public long? VulnCount { get; set; }

//        [JsonProperty("detectedLib", NullValueHandling = NullValueHandling.Ignore)]
//        public DetectedLib DetectedLib { get; set; }

//        [JsonProperty("requestStartTime", NullValueHandling = NullValueHandling.Ignore)]
//        public double? RequestStartTime { get; set; }

//        [JsonProperty("totalBytes", NullValueHandling = NullValueHandling.Ignore)]
//        public long? TotalBytes { get; set; }

//        [JsonProperty("wastedBytes", NullValueHandling = NullValueHandling.Ignore)]
//        public double? WastedBytes { get; set; }

//        [JsonProperty("wastedPercent", NullValueHandling = NullValueHandling.Ignore)]
//        public double? WastedPercent { get; set; }

//        [JsonProperty("wastedMs", NullValueHandling = NullValueHandling.Ignore)]
//        public double? WastedMs { get; set; }

//        [JsonProperty("requestCount", NullValueHandling = NullValueHandling.Ignore)]
//        public long? RequestCount { get; set; }

//        [JsonProperty("size", NullValueHandling = NullValueHandling.Ignore)]
//        public Size? Size { get; set; }

//        [JsonProperty("timing", NullValueHandling = NullValueHandling.Ignore)]
//        public long? Timing { get; set; }

//        [JsonProperty("timestamp", NullValueHandling = NullValueHandling.Ignore)]
//        public double? Timestamp { get; set; }

//        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
//        public string Data { get; set; }

//        [JsonProperty("tapTarget", NullValueHandling = NullValueHandling.Ignore)]
//        public Node TapTarget { get; set; }

//        [JsonProperty("overlappingTarget", NullValueHandling = NullValueHandling.Ignore)]
//        public Node OverlappingTarget { get; set; }

//        [JsonProperty("tapTargetScore", NullValueHandling = NullValueHandling.Ignore)]
//        public long? TapTargetScore { get; set; }

//        [JsonProperty("overlappingTargetScore", NullValueHandling = NullValueHandling.Ignore)]
//        public double? OverlappingTargetScore { get; set; }

//        [JsonProperty("overlapScoreRatio", NullValueHandling = NullValueHandling.Ignore)]
//        public double? OverlapScoreRatio { get; set; }

//        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
//        public long? Width { get; set; }

//        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
//        public long? Height { get; set; }

//        [JsonProperty("themeColor")]
//        public object ThemeColor { get; set; }

//        [JsonProperty("entity", NullValueHandling = NullValueHandling.Ignore)]
//        public DetectedLib Entity { get; set; }

//        [JsonProperty("mainThreadTime", NullValueHandling = NullValueHandling.Ignore)]
//        public double? MainThreadTime { get; set; }

//        [JsonProperty("timingType", NullValueHandling = NullValueHandling.Ignore)]
//        public TimingType? TimingType { get; set; }

//        [JsonProperty("protocol", NullValueHandling = NullValueHandling.Ignore)]
//        public string Protocol { get; set; }

//        [JsonProperty("cacheLifetimeMs", NullValueHandling = NullValueHandling.Ignore)]
//        public long? CacheLifetimeMs { get; set; }

//        [JsonProperty("cacheHitProbability", NullValueHandling = NullValueHandling.Ignore)]
//        public double? CacheHitProbability { get; set; }

//        [JsonProperty("debugData", NullValueHandling = NullValueHandling.Ignore)]
//        public ItemDebugData DebugData { get; set; }
//    }

//    public partial class ItemDebugData
//    {
//        [JsonProperty("type")]
//        public DebugDataType Type { get; set; }

//        [JsonProperty("public", NullValueHandling = NullValueHandling.Ignore)]
//        public bool? Public { get; set; }

//        [JsonProperty("max-age")]
//        public long MaxAge { get; set; }
//    }

//    public partial class DetectedLib
//    {
//        [JsonProperty("text")]
//        public string Text { get; set; }

//        [JsonProperty("url")]
//        public string Url { get; set; }

//        [JsonProperty("type")]
//        public ItemTypeEnum Type { get; set; }
//    }

//    public partial class ElementClass
//    {
//        [JsonProperty("type")]
//        public ItemTypeEnum Type { get; set; }

//        [JsonProperty("value")]
//        public string Value { get; set; }
//    }

//    public partial class Node
//    {
//        [JsonProperty("type")]
//        public ItemTypeEnum Type { get; set; }

//        [JsonProperty("selector")]
//        public string Selector { get; set; }

//        [JsonProperty("path")]
//        public string Path { get; set; }

//        [JsonProperty("snippet")]
//        public string Snippet { get; set; }

//        [JsonProperty("explanation", NullValueHandling = NullValueHandling.Ignore)]
//        public string Explanation { get; set; }

//        [JsonProperty("nodeLabel")]
//        public string NodeLabel { get; set; }
//    }

//    public partial class LongestChain
//    {
//        [JsonProperty("duration")]
//        public double Duration { get; set; }

//        [JsonProperty("length")]
//        public long Length { get; set; }

//        [JsonProperty("transferSize")]
//        public long TransferSize { get; set; }
//    }

//    public partial class Summary
//    {
//        [JsonProperty("wastedMs", NullValueHandling = NullValueHandling.Ignore)]
//        public double? WastedMs { get; set; }

//        [JsonProperty("wastedBytes", NullValueHandling = NullValueHandling.Ignore)]
//        public double? WastedBytes { get; set; }
//    }

//    public enum DebugDataType { Criticalrequestchain, Debugdata, Filmstrip, Opportunity, Screenshot, Table };

//    public enum ItemTypeEnum { Bytes, Code, Link, Ms, Node, Numeric, Text, Url };

//    public enum Label { Empty, PotentialSavings, Size, Url };

//    public enum ValueType { Bytes, Thumbnail, TimespanMs, Url };

//    public enum TimingType { Mark, Measure };

//    public enum ScoreDisplayMode { Binary, Informative, Manual, NotApplicable, Numeric };

//    public partial struct ElementUnion
//    {
//        public ElementClass ElementClass;
//        public string String;

//        public static implicit operator ElementUnion(ElementClass ElementClass) => new ElementUnion { ElementClass = ElementClass };
//        public static implicit operator ElementUnion(string String) => new ElementUnion { String = String };
//    }

//    public partial struct Size
//    {
//        public long? Integer;
//        public string String;

//        public static implicit operator Size(long Integer) => new Size { Integer = Integer };
//        public static implicit operator Size(string String) => new Size { String = String };
//    }

//    public partial class Welcome
//    {
//        public static Welcome FromJson(string json) => JsonConvert.DeserializeObject<Welcome>(json, LighthouseAuditAggregator.Converter.Settings);
//    }

//    public static class Serialize
//    {
//        public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, LighthouseAuditAggregator.Converter.Settings);
//    }

//    internal static class Converter
//    {
//        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
//        {
//            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
//            DateParseHandling = DateParseHandling.None,
//            Converters =
//            {
//                DebugDataTypeConverter.Singleton,
//                ItemTypeEnumConverter.Singleton,
//                LabelConverter.Singleton,
//                ValueTypeConverter.Singleton,
//                ElementUnionConverter.Singleton,
//                SizeConverter.Singleton,
//                TimingTypeConverter.Singleton,
//                ScoreDisplayModeConverter.Singleton,
//                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
//            },
//        };
//    }

//    internal class DebugDataTypeConverter : JsonConverter
//    {
//        public override bool CanConvert(Type t) => t == typeof(DebugDataType) || t == typeof(DebugDataType?);

//        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
//        {
//            if (reader.TokenType == JsonToken.Null) return null;
//            var value = serializer.Deserialize<string>(reader);
//            switch (value)
//            {
//                case "criticalrequestchain":
//                    return DebugDataType.Criticalrequestchain;
//                case "debugdata":
//                    return DebugDataType.Debugdata;
//                case "filmstrip":
//                    return DebugDataType.Filmstrip;
//                case "opportunity":
//                    return DebugDataType.Opportunity;
//                case "screenshot":
//                    return DebugDataType.Screenshot;
//                case "table":
//                    return DebugDataType.Table;
//            }
//            throw new Exception("Cannot unmarshal type DebugDataType");
//        }

//        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
//        {
//            if (untypedValue == null)
//            {
//                serializer.Serialize(writer, null);
//                return;
//            }
//            var value = (DebugDataType)untypedValue;
//            switch (value)
//            {
//                case DebugDataType.Criticalrequestchain:
//                    serializer.Serialize(writer, "criticalrequestchain");
//                    return;
//                case DebugDataType.Debugdata:
//                    serializer.Serialize(writer, "debugdata");
//                    return;
//                case DebugDataType.Filmstrip:
//                    serializer.Serialize(writer, "filmstrip");
//                    return;
//                case DebugDataType.Opportunity:
//                    serializer.Serialize(writer, "opportunity");
//                    return;
//                case DebugDataType.Screenshot:
//                    serializer.Serialize(writer, "screenshot");
//                    return;
//                case DebugDataType.Table:
//                    serializer.Serialize(writer, "table");
//                    return;
//            }
//            throw new Exception("Cannot marshal type DebugDataType");
//        }

//        public static readonly DebugDataTypeConverter Singleton = new DebugDataTypeConverter();
//    }

//    internal class ItemTypeEnumConverter : JsonConverter
//    {
//        public override bool CanConvert(Type t) => t == typeof(ItemTypeEnum) || t == typeof(ItemTypeEnum?);

//        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
//        {
//            if (reader.TokenType == JsonToken.Null) return null;
//            var value = serializer.Deserialize<string>(reader);
//            switch (value)
//            {
//                case "bytes":
//                    return ItemTypeEnum.Bytes;
//                case "code":
//                    return ItemTypeEnum.Code;
//                case "link":
//                    return ItemTypeEnum.Link;
//                case "ms":
//                    return ItemTypeEnum.Ms;
//                case "node":
//                    return ItemTypeEnum.Node;
//                case "numeric":
//                    return ItemTypeEnum.Numeric;
//                case "text":
//                    return ItemTypeEnum.Text;
//                case "url":
//                    return ItemTypeEnum.Url;
//            }
//            throw new Exception("Cannot unmarshal type ItemTypeEnum");
//        }

//        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
//        {
//            if (untypedValue == null)
//            {
//                serializer.Serialize(writer, null);
//                return;
//            }
//            var value = (ItemTypeEnum)untypedValue;
//            switch (value)
//            {
//                case ItemTypeEnum.Bytes:
//                    serializer.Serialize(writer, "bytes");
//                    return;
//                case ItemTypeEnum.Code:
//                    serializer.Serialize(writer, "code");
//                    return;
//                case ItemTypeEnum.Link:
//                    serializer.Serialize(writer, "link");
//                    return;
//                case ItemTypeEnum.Ms:
//                    serializer.Serialize(writer, "ms");
//                    return;
//                case ItemTypeEnum.Node:
//                    serializer.Serialize(writer, "node");
//                    return;
//                case ItemTypeEnum.Numeric:
//                    serializer.Serialize(writer, "numeric");
//                    return;
//                case ItemTypeEnum.Text:
//                    serializer.Serialize(writer, "text");
//                    return;
//                case ItemTypeEnum.Url:
//                    serializer.Serialize(writer, "url");
//                    return;
//            }
//            throw new Exception("Cannot marshal type ItemTypeEnum");
//        }

//        public static readonly ItemTypeEnumConverter Singleton = new ItemTypeEnumConverter();
//    }

//    internal class LabelConverter : JsonConverter
//    {
//        public override bool CanConvert(Type t) => t == typeof(Label) || t == typeof(Label?);

//        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
//        {
//            if (reader.TokenType == JsonToken.Null) return null;
//            var value = serializer.Deserialize<string>(reader);
//            switch (value)
//            {
//                case "":
//                    return Label.Empty;
//                case "Potential Savings":
//                    return Label.PotentialSavings;
//                case "Size":
//                    return Label.Size;
//                case "URL":
//                    return Label.Url;
//            }
//            throw new Exception("Cannot unmarshal type Label");
//        }

//        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
//        {
//            if (untypedValue == null)
//            {
//                serializer.Serialize(writer, null);
//                return;
//            }
//            var value = (Label)untypedValue;
//            switch (value)
//            {
//                case Label.Empty:
//                    serializer.Serialize(writer, "");
//                    return;
//                case Label.PotentialSavings:
//                    serializer.Serialize(writer, "Potential Savings");
//                    return;
//                case Label.Size:
//                    serializer.Serialize(writer, "Size");
//                    return;
//                case Label.Url:
//                    serializer.Serialize(writer, "URL");
//                    return;
//            }
//            throw new Exception("Cannot marshal type Label");
//        }

//        public static readonly LabelConverter Singleton = new LabelConverter();
//    }

//    internal class ValueTypeConverter : JsonConverter
//    {
//        public override bool CanConvert(Type t) => t == typeof(ValueType) || t == typeof(ValueType?);

//        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
//        {
//            if (reader.TokenType == JsonToken.Null) return null;
//            var value = serializer.Deserialize<string>(reader);
//            switch (value)
//            {
//                case "bytes":
//                    return ValueType.Bytes;
//                case "thumbnail":
//                    return ValueType.Thumbnail;
//                case "timespanMs":
//                    return ValueType.TimespanMs;
//                case "url":
//                    return ValueType.Url;
//            }
//            throw new Exception("Cannot unmarshal type ValueType");
//        }

//        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
//        {
//            if (untypedValue == null)
//            {
//                serializer.Serialize(writer, null);
//                return;
//            }
//            var value = (ValueType)untypedValue;
//            switch (value)
//            {
//                case ValueType.Bytes:
//                    serializer.Serialize(writer, "bytes");
//                    return;
//                case ValueType.Thumbnail:
//                    serializer.Serialize(writer, "thumbnail");
//                    return;
//                case ValueType.TimespanMs:
//                    serializer.Serialize(writer, "timespanMs");
//                    return;
//                case ValueType.Url:
//                    serializer.Serialize(writer, "url");
//                    return;
//            }
//            throw new Exception("Cannot marshal type ValueType");
//        }

//        public static readonly ValueTypeConverter Singleton = new ValueTypeConverter();
//    }

//    internal class ElementUnionConverter : JsonConverter
//    {
//        public override bool CanConvert(Type t) => t == typeof(ElementUnion) || t == typeof(ElementUnion?);

//        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
//        {
//            switch (reader.TokenType)
//            {
//                case JsonToken.String:
//                case JsonToken.Date:
//                    var stringValue = serializer.Deserialize<string>(reader);
//                    return new ElementUnion { String = stringValue };
//                case JsonToken.StartObject:
//                    var objectValue = serializer.Deserialize<ElementClass>(reader);
//                    return new ElementUnion { ElementClass = objectValue };
//            }
//            throw new Exception("Cannot unmarshal type ElementUnion");
//        }

//        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
//        {
//            var value = (ElementUnion)untypedValue;
//            if (value.String != null)
//            {
//                serializer.Serialize(writer, value.String);
//                return;
//            }
//            if (value.ElementClass != null)
//            {
//                serializer.Serialize(writer, value.ElementClass);
//                return;
//            }
//            throw new Exception("Cannot marshal type ElementUnion");
//        }

//        public static readonly ElementUnionConverter Singleton = new ElementUnionConverter();
//    }

//    internal class SizeConverter : JsonConverter
//    {
//        public override bool CanConvert(Type t) => t == typeof(Size) || t == typeof(Size?);

//        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
//        {
//            switch (reader.TokenType)
//            {
//                case JsonToken.Integer:
//                    var integerValue = serializer.Deserialize<long>(reader);
//                    return new Size { Integer = integerValue };
//                case JsonToken.String:
//                case JsonToken.Date:
//                    var stringValue = serializer.Deserialize<string>(reader);
//                    return new Size { String = stringValue };
//            }
//            throw new Exception("Cannot unmarshal type Size");
//        }

//        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
//        {
//            var value = (Size)untypedValue;
//            if (value.Integer != null)
//            {
//                serializer.Serialize(writer, value.Integer.Value);
//                return;
//            }
//            if (value.String != null)
//            {
//                serializer.Serialize(writer, value.String);
//                return;
//            }
//            throw new Exception("Cannot marshal type Size");
//        }

//        public static readonly SizeConverter Singleton = new SizeConverter();
//    }

//    internal class TimingTypeConverter : JsonConverter
//    {
//        public override bool CanConvert(Type t) => t == typeof(TimingType) || t == typeof(TimingType?);

//        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
//        {
//            if (reader.TokenType == JsonToken.Null) return null;
//            var value = serializer.Deserialize<string>(reader);
//            switch (value)
//            {
//                case "Mark":
//                    return TimingType.Mark;
//                case "Measure":
//                    return TimingType.Measure;
//            }
//            throw new Exception("Cannot unmarshal type TimingType");
//        }

//        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
//        {
//            if (untypedValue == null)
//            {
//                serializer.Serialize(writer, null);
//                return;
//            }
//            var value = (TimingType)untypedValue;
//            switch (value)
//            {
//                case TimingType.Mark:
//                    serializer.Serialize(writer, "Mark");
//                    return;
//                case TimingType.Measure:
//                    serializer.Serialize(writer, "Measure");
//                    return;
//            }
//            throw new Exception("Cannot marshal type TimingType");
//        }

//        public static readonly TimingTypeConverter Singleton = new TimingTypeConverter();
//    }

//    internal class ScoreDisplayModeConverter : JsonConverter
//    {
//        public override bool CanConvert(Type t) => t == typeof(ScoreDisplayMode) || t == typeof(ScoreDisplayMode?);

//        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
//        {
//            if (reader.TokenType == JsonToken.Null) return null;
//            var value = serializer.Deserialize<string>(reader);
//            switch (value)
//            {
//                case "binary":
//                    return ScoreDisplayMode.Binary;
//                case "informative":
//                    return ScoreDisplayMode.Informative;
//                case "manual":
//                    return ScoreDisplayMode.Manual;
//                case "notApplicable":
//                    return ScoreDisplayMode.NotApplicable;
//                case "numeric":
//                    return ScoreDisplayMode.Numeric;
//            }
//            throw new Exception("Cannot unmarshal type ScoreDisplayMode");
//        }

//        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
//        {
//            if (untypedValue == null)
//            {
//                serializer.Serialize(writer, null);
//                return;
//            }
//            var value = (ScoreDisplayMode)untypedValue;
//            switch (value)
//            {
//                case ScoreDisplayMode.Binary:
//                    serializer.Serialize(writer, "binary");
//                    return;
//                case ScoreDisplayMode.Informative:
//                    serializer.Serialize(writer, "informative");
//                    return;
//                case ScoreDisplayMode.Manual:
//                    serializer.Serialize(writer, "manual");
//                    return;
//                case ScoreDisplayMode.NotApplicable:
//                    serializer.Serialize(writer, "notApplicable");
//                    return;
//                case ScoreDisplayMode.Numeric:
//                    serializer.Serialize(writer, "numeric");
//                    return;
//            }
//            throw new Exception("Cannot marshal type ScoreDisplayMode");
//        }

//        public static readonly ScoreDisplayModeConverter Singleton = new ScoreDisplayModeConverter();
//    }
//}
